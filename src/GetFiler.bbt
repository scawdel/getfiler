REM >!GetFiler
REM
REM Copyright 2002-2017, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of GetFiler:
REM
REM   http://www.stevefryatt.org.uk/software/
REM
REM Licensed under the EUPL, Version 1.1 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.
:
REM Save the positions of Filer windows.
:
LIBRARY "BASIC:Icon"
LIBRARY "BASIC:Menu"
LIBRARY "BASIC:Message"
LIBRARY "BASIC:Resources"
LIBRARY "BASIC:String"
LIBRARY "BASIC:Template"
LIBRARY "BASIC:Url"
LIBRARY "BASIC:WimpError"
LIBRARY "BASIC:Window"
:
PROCwimperror_initialise("GetFiler", "!getfiler")
ON ERROR result% = FNwimperror_program : END

REM These values get replaced by tokenize.

build_version$ = "1.10"
build_date$ = "01 Jul 2009"

PROCinitialise

ON ERROR Quit% = FNwimperror_program

WHILE NOT Quit%
	PROCpoll
ENDWHILE

SYS "Wimp_CloseDown"
END


REM Handle calls to Wimp_Poll and process the responses.
:
DEF PROCpoll
LOCAL reason%

SYS "Wimp_Poll", PollMask%, b% TO reason%
:
CASE reason% OF
	WHEN 0		: IF DesktopSaveSent% THEN PROCprocess_desktop_save_result
	WHEN 2		: SYS "Wimp_OpenWindow",,b%
	WHEN 3		: SYS "Wimp_CloseWindow",,b%
	WHEN 6		: PROCmouse_click(b%!12, b%!16, b%!8)
	WHEN 7		: PROCuser_drag_box_end
	WHEN 8		: PROCkey_press(!b%, b%!24)
	WHEN 9		: PROCmenu_selection(b%)
	WHEN 17, 18	: PROCuser_message(b%)
	WHEN 19		: PROCuser_message_bounce(b%)
ENDCASE
ENDPROC


REM Process mouse clicks in windows.
REM
REM \param window%	The window under the mouse.
REM \param icon%	The icon under the mouse.
REM \param buttons%	The buttons involved in the selection.
:
DEF PROCmouse_click(window%, icon%, button%)
CASE window% OF
WHEN -2
	CASE button% OF
	WHEN 2
		PROCmenu_create_iconbar(IconbarMenu%, !b%)
	WHEN 4
		PROCsend_desktop_save
	ENDCASE
	
WHEN SaveWindow%
	CASE button% OF
	WHEN 64
		IF icon% = 3 THEN PROCstart_save_drag
	WHEN 4
		CASE icon% OF
		WHEN 0
			PROCsave_obey_file($FNicon_indirection(SaveWindow%, 2))
		WHEN 1
			SYS "Wimp_CreateMenu",, -1, 0, 0
		ENDCASE
	ENDCASE

WHEN InfoWindow%
	IF button% = 4 AND icon% = 8 THEN
		PROCurl_launch(FNmessage_lookup("SupportURL"))
		PROCmenu_create(-1, 0, 0)
	ENDIF
ENDCASE
ENDPROC


REM Process keypresses in windows.
REM
REM \param window%	The window owning the caret.
REM \param key%		The code of the keypress.
:
DEF PROCkey_press(window%, key%)
CASE window% OF
WHEN SaveWindow%
	CASE key% OF
	WHEN 13
		PROCsave_obey_file($FNicon_indirection(SaveWindow%, 2))
	WHEN 27
		SYS "Wimp_CreateMenu",, -1, 0, 0
	OTHERWISE
		SYS "Wimp_ProcessKey", key%
	ENDCASE

OTHERWISE
	SYS "Wimp_ProcessKey", key%
ENDCASE
ENDPROC


REM Process selections from menus.
REM
REM \param		The menu selection block.
:
DEF PROCmenu_selection(block%)
CASE FNmenu_current_handle OF
WHEN IconbarMenu%
	CASE !block% OF
	WHEN 1	: OSCLI("%Filer_Run <GetFiler$Dir>.!Help")
	WHEN 2	: Quit% = TRUE
	ENDCASE
ENDCASE
ENDPROC


REM Process incoming User Messages.
REM
REM |param block%	The user message block.
:
DEF PROCuser_message(block%)
CASE b%!16 OF
	WHEN 0		: Quit% = TRUE
	WHEN 2		: PROCsave_file_from_drag
	WHEN &502	: PROCsend_interactive_help(block%)
	WHEN &400C9	: IF block%!20 = SaveWindow% THEN SYS "OS_File", 6, "Pipe:$.GetFiler"
	WHEN &4E383	: PROCurl_bounce(block%)
ENDCASE
ENDPROC


REM Process bounced User Messages.
REM
REM |param block%	The user message block.
:
DEF PROCuser_message_bounce(block%)
CASE b%!16 OF
	WHEN &A		: PROCwimperror_report(FNmessage_lookup("BadSave"), 2, 2, "")
	WHEN &4AF80	: PROCurl_bounce(block%)
ENDCASE
ENDPROC


REM Process requests for interactive help text.
REM
REM \param message%		Pointer to the Message_HelpRequest block.
:
DEF PROCsend_interactive_help(message%)
LOCAL root$, suffix$, found%, message$

REM Compare the window handle to the windows we know about, and find the
REM relevant token name.

CASE message%!32 OF
	WHEN -2			: root$ = "IconBar"
	WHEN SaveWindow%	: root$ = "SaveAs"
	WHEN InfoWindow%	: root$ = "Info"
	OTHERWISE		: root$ = ""
ENDCASE

REM Look up the help text, either as a window message or by checking the
REM menus that belong to us.

IF root$ <> "" THEN
	suffix$ = FNicon_validation_command(message%!32, message%!36, "N")

	REM If there's a name in the validation string, use that; otherwise
	REM check to see if there's a special case to set up.

	IF suffix$ <> "" THEN
		root$ += "." + suffix$
	ELSE
		IF message%!36 >= 0 THEN root$ += ".Icon" + STR$(message%!36)
	ENDIF
	found% = FNmessage_lookup_result("Help." + root$, message$)
ELSE
	SYS "Wimp_GetMenuState", 1, q%, message%!32, message%!36
	CASE FNmenu_current_handle OF
		WHEN IconbarMenu%	: root$ = "IconBarMenu." + RIGHT$("00" + STR$(!q%), 2)
	ENDCASE
	
	IF root$ <> "" THEN found% = FNmessage_lookup_result("Help." + root$, message$)
ENDIF

REM If no message was found, give up now.

IF NOT found% THEN ENDPROC

REM If a message was found, send it back to the requestor.

message%!12 = message%!8
message%!16 = &503
$(message% + 20) = message$ + CHR$(0)
!message% = 24+(LEN(message$) AND &FFFFFC)
SYS "Wimp_SendMessage", 17, message%, message%!4
ENDPROC


REM Initialise ourselves, internally and with the Wimp.
:
DEF PROCinitialise
LOCAL resources$, task_name$, task_sprite$, indirected_data%, indirected_data_size%, icon_bar%, flags%, cmos_28%

REM Set up the quit flag, poll mask and global data blocks.

Quit% = FALSE
PollMask% = &3C01
DesktopSaveSent% = FALSE

DIM a% 256, b% 4095, q% 256

REM Locate the application resources.

resources$ = FNresources_find_territory_folder("<GetFiler$Dir>.Resources")

REM Load the messages file.

PROCmessage_initialise(resources$ + "Messages")

task_name$ = FNmessage_lookup("TaskName")
task_sprite$ = FNmessage_lookup("TaskSpr")
PROCwimperror_initialise(task_name$, task_sprite$)

REM Initialise with the Wimp.

q%!0 = 2
q%!4 = &502
q%!8 = &400C9
q%!12 = &4E383
q%!16 = &4AF80
q%!20 = 0
:
SYS "Wimp_Initialise", 310, &4B534154, task_name$, q%

REM Load the window templates.

indirected_data_size% = 1024
DIM indirected_data% indirected_data_size%

PROCtemplate_open(resources$ + "Templates")
PROCtemplate_load("Info",b%,indirected_data%,indirected_data_size%,-1)
SYS "Wimp_CreateWindow",,b% TO InfoWindow%
PROCtemplate_load("SaveAs",b%,indirected_data%,indirected_data_size%,-1)
SYS "Wimp_CreateWindow",,b% TO SaveWindow%
PROCtemplate_close

$FNicon_indirection(InfoWindow%, 2) = CHR$(169) + " Stephen Fryatt, 2002-" + MID$(build_date$, 8)
$FNicon_indirection(InfoWindow%, 3) = build_version$ + " (" + build_date$ + ")"

REM Initialise and load the menu templates.

PROCmenu_initialise
!q% = InfoWindow%
PROCmenu_load_templates(resources$ + "Menus", q%)
IconbarMenu% = !q%

REM Initialise the dragging system.

SYS "XOS_SWINumberFromString",,"DragASprite_Start" TO ;flags%
DragASprite% = ((flags% AND 1) = 0)
SYS "OS_Byte", 161, 28 TO ,,cmos_28%
IF (cmos_28% AND %10) = 0 THEN DragASprite% = FALSE

REM Create an iconbar icon.

icon_bar%=FNicon_create_standard_bar(-1, task_sprite$)
ENDPROC
:
:
:
:
DEF PROCsend_desktop_save
LOCAL task_name$
save_x%=!b% : save_y%=b%!4
next_task%=0
found%=FALSE
:
REPEAT
 SYS "TaskManager_EnumerateTasks",next_task%,b%,16 TO next_task%
 SYS "XOS_GenerateError", b%!4 TO task_name$
 IF task_name$ = "Filer" THEN found% = TRUE : task_handle% = !b%
UNTIL next_task%<0 OR found%
:
IF found% THEN
 SYS "OS_Find",&83,"Pipe:$.GetFiler" TO file%
 !b%=28
 b%!12=0
 b%!16=&A
 b%!20=file%
 b%!24=0
 SYS "Wimp_SendMessage",17,b%,task_handle%
 DesktopSaveSent%=TRUE
 PollMask% = PollMask% AND &FFFFFFFE
ENDIF
ENDPROC
:
:
:
:
DEF PROCprocess_desktop_save_result
DesktopSaveSent%=FALSE
PollMask% = PollMask% OR &01
SYS "OS_Find",0,file%
:
$FNicon_indirection(SaveWindow%,2)="FilerPos"
PROCwindow_open_as_menu_at(SaveWindow%,save_x%,save_y%)
ENDPROC
:
:
:
:
DEF PROCstart_save_drag
:
LOCAL ox%,oy%,sprite$
:
!q%=SaveWindow%
SYS "Wimp_GetWindowState",,q%
ox%=q%!4-q%!20
oy%=q%!16-q%!24
q%!4=3
SYS "Wimp_GetIconState",,q%
SYS "XOS_GenerateError", q%!28 TO sprite$
q%!4=5
q%!8=ox%+q%!8
q%!12=oy%+q%!12
q%!16=ox%+q%!16
q%!20=oy%+q%!20
q%!24=&80000000
q%!28=&80000000
q%!32=&7FFFFFFF
q%!36=&7FFFFFFF
:
IF DragASprite% THEN
 SYS "DragASprite_Start",%11000101,1,sprite$,q%+8,q%+24
ELSE
 SYS "Wimp_DragBox",,q%
ENDIF
ENDPROC
:
:
:
:
DEF PROCuser_drag_box_end
:
IF DragASprite% THEN SYS "DragASprite_Stop"
:
SYS "Wimp_GetPointerInfo",,q%
q%!20=q%!12
q%!24=q%!16
q%!28=q%!0
q%!32=q%!4
q%!12=0
q%!16=1
:
$(q%+44)=FNstring_leafname($FNicon_indirection(SaveWindow%,2))+CHR$(0)
q%!36=0    : REM File size (rubbish)
q%!40=&FEB : REM File type
q%!0=(48+LEN($(q%+44))) AND (NOT %11)
SYS "Wimp_SendMessage",18,q%,q%!20,q%!24
ENDPROC
:
:
:
:
DEF PROCsave_file_from_drag
LOCAL filename$
SYS "XOS_GenerateError", b% + 44 TO filename$
PROCsave_obey_file(filename$)
:
b%!12=b%!8
b%!16=3
SYS "Wimp_SendMessage",18,b%,b%!4
ENDPROC
:
:
:
:
DEF PROCsave_obey_file(file$)
:
SYS "OS_Find",&83,file$ TO output%
SYS "OS_Find",&43,"Pipe:$.GetFiler" TO input%

IF input%<>0 AND output%<>0 THEN
 WHILE NOT EOF#input%
  line$=GET$#input%
  IF LEFT$(line$,13)="Filer_OpenDir" THEN BPUT#output%,line$
 ENDWHILE
ENDIF

IF output%<>0 THEN
 SYS "OS_Find",0,output%
 SYS "OS_File",18,file$,&FEB
ENDIF
IF input%<>0 THEN SYS "OS_Find",0,input%

SYS "Wimp_CreateMenu",,-1,0,0
ENDPROC

